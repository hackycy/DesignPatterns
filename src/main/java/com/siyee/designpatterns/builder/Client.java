package com.siyee.designpatterns.builder;

public class Client {

    public static void main(String[] args) {

        /**
         * 建造者模式
         * 优点：
         * 1、在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。
         * 2、每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者
         *    即可得到不同的产品对象，由于指挥者类（ActorController）针对抽象建造者编程，增加新的具体建造者无需修改原有类库的代码，系统扩展方便，
         *    符合开闭原则。
         * 3、可以更加精细的控制产品的创建过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加精细，也更方便使用程序来控制创建过程。
         *
         * 缺点：
         * 1、建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间差异性很大，例如很多组成部分都不相同，不适合使用，因此范围受到限制。
         * 2、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得庞大，增加系统理解难度和运行成本。
         *
         * 适用环境：
         * 1、需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员变量。
         * 2、需要生成的产品对象的属性相互依赖，需要制定其生成顺序。
         * 3、对象的创建过程独立于创建该对象的类。在建造者模式中通过引入指挥者类将创建过程封装在指挥者类中，而不在建造者类和客户类中。
         * 4、隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。
         */

        ActorBuilder ab = new HeroActorBuilder();
        ActorController actorController = new ActorController();
        Actor actor = actorController.createActor(ab);

        System.out.println(actor.toString());

    }

}
